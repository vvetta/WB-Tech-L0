// Code generated by MockGen. DO NOT EDIT.
// Source: WB-Tech-L0/internal/usecase (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "WB-Tech-L0/internal/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetOrderById mocks base method.
func (m *MockRepo) GetOrderById(arg0 context.Context, arg1 string) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", arg0, arg1)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockRepoMockRecorder) GetOrderById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockRepo)(nil).GetOrderById), arg0, arg1)
}

// ListRecentOrders mocks base method.
func (m *MockRepo) ListRecentOrders(arg0 context.Context, arg1 int) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecentOrders", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecentOrders indicates an expected call of ListRecentOrders.
func (mr *MockRepoMockRecorder) ListRecentOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecentOrders", reflect.TypeOf((*MockRepo)(nil).ListRecentOrders), arg0, arg1)
}

// UpsertOrder mocks base method.
func (m *MockRepo) UpsertOrder(arg0 context.Context, arg1 *domain.Order) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOrder", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertOrder indicates an expected call of UpsertOrder.
func (mr *MockRepoMockRecorder) UpsertOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOrder", reflect.TypeOf((*MockRepo)(nil).UpsertOrder), arg0, arg1)
}
